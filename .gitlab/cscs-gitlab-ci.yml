include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

stages:
  - build-base
  - test

.common-setup:
  stage: test
  before_script:
    - |
      if [ ${CI_PIPELINE_SOURCE} == "schedule" ]; then
        export CDASH_MODEL="Nightly"
      elif [ ${CI_COMMIT_REF_NAME} == "develop" ]; then
        export CDASH_MODEL="Continuous"
      else
        export CDASH_MODEL="Experimental"
        export GITHUB_PR_ID=${CI_COMMIT_BRANCH#__CSCSCI__pr}
      fi

NVIDIA-GH200-base-container-build:
  extends: [.container-builder-cscs-gh200, .dynamic-image-name]
  stage: build-base
  before_script:
    - |
      cat - << EOF > .gitlab/cscs-dockerfile
      FROM nvcr.io/nvidia/cuda:12.6.1-devel-ubuntu24.04
      RUN apt-get update && apt-get install -y cmake git python3 && rm -Rf /var/cache/apt
      EOF
    - !reference [.dynamic-image-name, before_script]
  variables:
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/base/build_image
    DOCKERFILE: .gitlab/cscs-dockerfile
    WATCH_FILECHANGES: $DOCKERFILE

NVIDIA-GH200:
  extends: [.container-runner-daint-gh200, .common-setup]
  image: $BASE_IMAGE
  script:
    - export CMAKE_BUILD_PARALLEL_LEVEL=64
    - export ENV_CMAKE_OPTIONS=""
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_COMPILER=`pwd`/bin/nvcc_wrapper"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_FLAGS='-Werror=all-warnings -Werror'"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ARCH_HOPPER90=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_CUDA=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_COMPILER_WARNINGS=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_IMPL_CUDA_UNIFIED_MEMORY=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_TESTS=ON"
    - export CTEST_BUILD_NAME="NVIDIA-GH200"
    - ctest -VV
        -D CDASH_MODEL=${CDASH_MODEL}
        -D GITHUB_PR_ID="${GITHUB_PR_ID}"
        -D CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS}"
        -D OUTPUT_JUNIT_FILE=result_gh200.xml
        -S scripts/CTestRun.cmake
        -D CTEST_SITE="cscs-alps-daint"
        -D CTEST_BUILD_NAME="${CTEST_BUILD_NAME}"
  artifacts:
    when: always
    paths:
      - build/result_gh200.xml
    reports:
      junit: build/result_gh200.xml

